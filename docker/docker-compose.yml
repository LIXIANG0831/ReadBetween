version: '3.8'

services:
  readbetween:
    container_name: readbetween-app
    build:
      context: ../src/backend/readbetween
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - APP_ENV=prod
      - MYSQL_URI=mysql+pymysql://root:readbetween0322@mysql:3306/readbetween?charset=utf8mb4
      - REDIS_URI=redis://redis:6379
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_BUCKET=readbetween
      - MILVUS_URI=http://standalone:19530
      - NEO4J_URL=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=12345678
      - LLM_BASE_URL=https://gpt.xxxxx.com/v1
      - LLM_API_KEY=sk-xxxxx
      - LLM_NAME=COSMO-GPT
      - EMBEDDING_BASE_URL=https://gpt.xxxxx.com/v1
      - EMBEDDING_API_KEY=sk-xxxxx
      - EMBEDDING_NAME=text-embedding-ada-002
      - EMBEDDING_DIMENSION=768
      - MILVUS_MEMORY_NAME=readbetween_memory
      - SALT=readbetween
      - LOG_PATH=/app/logs
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/readbetween/logs:/app/logs
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      standalone:
        condition: service_healthy
    networks:
      - readbetween-network
    restart: on-failure

  neo4j:
    container_name: readbetween-neo4j
    image: neo4j:latest
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      NEO4J_AUTH: neo4j/12345678
      NEO4J_apoc_export_file_enabled: "true"
      NEO4J_apoc_import_file_enabled: "true"
      NEO4J_apoc_import_file_use__neo4j__config: "true"
      NEO4JLABS_PLUGINS: '["apoc"]'
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/neo4j/data:/data
      - ${DOCKER_VOLUME_DIRECTORY:-.}/neo4j/logs:/logs
      - ${DOCKER_VOLUME_DIRECTORY:-.}/neo4j/import:/var/lib/neo4j/import
      - ${DOCKER_VOLUME_DIRECTORY:-.}/neo4j/plugins:/plugins
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:7474" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: on-failure

  redis:
    container_name: readbetween-redis
    image: redis:7.0.4
    ports:
      - "6379:6379"
    environment:
      TZ: Asia/Shanghai
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/redis/data:/data
      - ${DOCKER_VOLUME_DIRECTORY:-.}/redis/redis.conf:/etc/redis.conf
    command: redis-server /etc/redis.conf
    healthcheck:
      test: [ "CMD-SHELL", 'redis-cli ping|grep -e "PONG\|NOAUTH"' ]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: on-failure

  mysql:
    container_name: readbetween-mysql
    image: mysql:8.3.0
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: "readbetween0322"
      MYSQL_DATABASE: "readbetween"
      TZ: Asia/Shanghai
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/mysql/conf/my.cnf:/etc/mysql/my.cnf
      - ${DOCKER_VOLUME_DIRECTORY:-.}/mysql/data:/var/lib/mysql
    healthcheck:
      test: [ "CMD-SHELL", "exit | mysql -u root -p$$MYSQL_ROOT_PASSWORD" ]
      start_period: 30s
      interval: 20s
      timeout: 10s
      retries: 4
    restart: on-failure

  etcd:
    container_name: readbetween-milvus-etcd
    image: quay.io/coreos/etcd:v3.5.5
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/milvus-server-volumes/etcd:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3

  minio:
    container_name: readbetween-milvus-minio
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    environment:
      MINIO_ACCESS_KEY: "minioadmin"
      MINIO_SECRET_KEY: "minioadmin"
    ports:
      - "9001:9001"
      - "9000:9000"
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/milvus-server-volumes/minio:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  standalone:
    container_name: readbetween-milvus-standalone
    image: milvusdb/milvus:v2.4.9
    command: ["milvus", "run", "standalone"]
    security_opt:
      - seccomp:unconfined
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/milvus-server-volumes/milvus:/var/lib/milvus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      etcd:
        condition: service_healthy
      minio:
        condition: service_healthy

  attu:
    container_name: readbetween-milvus-attu
    image: zilliz/attu:v2.4
    environment:
      MILVUS_URL: standalone:19530
    ports:
      - "8000:3000"
    depends_on:
      standalone:
        condition: service_healthy

networks:
  default:
    name: readbetween-network
