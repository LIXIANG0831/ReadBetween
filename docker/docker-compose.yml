version: '3.8'

services:
  frontend:
    container_name: readbetween-app-frontend
    build:
      context: ../src/frontend/rb_frontend
      dockerfile: Dockerfile
    ports:
      - "18080:80"
    environment:
      - VITE_BACKEND_URL=http://backend:8080
      - VITE_IMAGE_BED_TOKEN="YOUR IMAGES BED TOKEN"
    depends_on:
      backend:
        condition: service_healthy
    restart: always
    networks:
      - readbetween-network

  backend:
    container_name: readbetween-app-backend
    build:
      context: ../src/backend/readbetween
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    environment:
      # 应用配置
      APP__ENV: "prod"
      APP__AUTHOR: "LIXIANG"
      APP__VERSION: "v1.0"
      APP__PORT: "8080"

      # 存储配置
      STORAGE__MYSQL__URI: "mysql+pymysql://root:readbetween0322@mysql:3306/readbetween?charset=utf8mb4"
      STORAGE__REDIS__URI: "redis://redis:6379"
      STORAGE__MINIO__SECURE: "false"
      STORAGE__MINIO__CERT_CHECK: "false"
      STORAGE__MINIO__ENDPOINT: "minio:9000"
      STORAGE__MINIO__ACCESS_KEY: "minioadmin"
      STORAGE__MINIO__SECRET_KEY: "minioadmin"
      STORAGE__MINIO__DEFAULT_BUCKET: "readbetween"
      STORAGE__MILVUS__URI: "http://standalone:19530"
      STORAGE__ES__HOSTS: '["http://es:9200"]'
      STORAGE__ES__TIMEOUT: "200"

      # 记忆存储配置 - Neo4j
      MEMORY__NEO4J__URL: "bolt://neo4j:7687"
      MEMORY__NEO4J__USERNAME: "neo4j"
      MEMORY__NEO4J__PASSWORD: "readbetween0322"

      # 记忆存储配置 - LLM
      MEMORY__LLM__BASE_URL: "YOURS OPENAI COMPATIBLE BASE URL"
      MEMORY__LLM__API_KEY: "YOURS API KEY"
      MEMORY__LLM__LLM_NAME: "YOURS LLM NAME, e.g. gpt-4o"

      # 记忆存储配置 - Embedding
      MEMORY__EMBEDDING__BASE_URL: "YOURS OPENAI COMPATIBLE BASE URL"
      MEMORY__EMBEDDING__API_KEY: "YOURS API KEY"
      MEMORY__EMBEDDING__EMBEDDING_NAME: "YOURS EMBEDDING NAME, e.g. text-embedding-ada-002"
      MEMORY__EMBEDDING__DIMENSION: "YOURS EMBEDDING DIMENSION, e.g. 768"
      MEMORY__MILVUS_MEMORY_NAME: "readbetween_memory"

      # 日志配置
      LOGGER__BASE_LOG_PATH: "/app/logs"

      # 系统配置
      SYSTEM__MODELS__BASE_DIR: "./static/models"
      SYSTEM__MODELS__EMBEDDING_NAME: "iic/nlp_gte_sentence-embedding_chinese-large"
      SYSTEM__DEFAULT_MODEL_PROVIDER: "[{\"Qwen\": \"qwen\"},{\"OpenAI\": \"openai\"},{\"OpenAI-Compatible\": \"openai-compatible\"},{\"vLLM\": \"hosted_vllm\"}]"

      # API配置
      API__LIVEKIT__API_KEY: "YOURS LIVEKIT API KEY"
      API__LIVEKIT__API_SECRET: "YOURS LIVEKIT API SECRET"
      API__LIVEKIT__URL: "YOURS LIVEKIT URL, e.g. ws://127.0.0.1:7880"
      API__DEEPGRAM__API_KEY: "YOURS DEEPGRAM API KEY"
      API__CARTESIA__API_KEY: "YOURS CARTESIA API KEY"

    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/readbetween/logs:/app/logs
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      standalone:
        condition: service_healthy
    networks:
      - readbetween-network
    restart: on-failure

  neo4j:
    container_name: readbetween-neo4j
    image: neo4j:latest
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      NEO4J_AUTH: neo4j/readbetween0322
      NEO4J_apoc_export_file_enabled: "true"
      NEO4J_apoc_import_file_enabled: "true"
      NEO4J_apoc_import_file_use__neo4j__config: "true"
      NEO4JLABS_PLUGINS: '["apoc"]'
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/neo4j/data:/data
      - ${DOCKER_VOLUME_DIRECTORY:-.}/neo4j/logs:/logs
      - ${DOCKER_VOLUME_DIRECTORY:-.}/neo4j/import:/var/lib/neo4j/import
      - ${DOCKER_VOLUME_DIRECTORY:-.}/neo4j/plugins:/plugins
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7474"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: on-failure

  redis:
    container_name: readbetween-redis
    image: redis:7.0.4
    ports:
      - "6379:6379"
    environment:
      TZ: Asia/Shanghai
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/redis/data:/data
      #- ${DOCKER_VOLUME_DIRECTORY:-.}/redis/redis.conf:/etc/redis.conf
    command: redis-server /etc/redis.conf
    healthcheck:
      test: ["CMD-SHELL", 'redis-cli ping | grep -e "PONG\|NOAUTH"']
      interval: 10s
      timeout: 5s
      retries: 3
    restart: on-failure

  mysql:
    container_name: readbetween-mysql
    image: mysql:8.3.0
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: "readbetween0322"
      MYSQL_DATABASE: "readbetween"
      TZ: Asia/Shanghai
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/mysql/data:/var/lib/mysql
      #- ${DOCKER_VOLUME_DIRECTORY:-.}/mysql/conf/my.cnf:/etc/mysql/my.cnf
    healthcheck:
      test: ["CMD-SHELL", "exit | mysql -u root -p$MYSQL_ROOT_PASSWORD"]
      start_period: 30s
      interval: 20s
      timeout: 10s
      retries: 4
    restart: on-failure

  etcd:
    container_name: readbetween-milvus-etcd
    image: quay.io/coreos/etcd:v3.5.5
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/milvus-server-volumes/etcd:/etcd
    command: etcd -advertise-client-urls=http://etcd:2379 \
      -listen-client-urls http://0.0.0.0:2379 \
      --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3

  minio:
    container_name: readbetween-milvus-minio
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    environment:
      MINIO_ACCESS_KEY: "minioadmin"
      MINIO_SECRET_KEY: "minioadmin"
    ports:
      - "9001:9001"
      - "9000:9000"
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/milvus-server-volumes/minio:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  standalone:
    container_name: readbetween-milvus-standalone
    image: milvusdb/milvus:v2.4.9
    command: ["milvus", "run", "standalone"]
    security_opt:
      - seccomp:unconfined
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/milvus-server-volumes/milvus:/var/lib/milvus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      etcd:
        condition: service_healthy
      minio:
        condition: service_healthy

  attu:
    container_name: readbetween-milvus-attu
    image: zilliz/attu:v2.4
    environment:
      MILVUS_URL: standalone:19530
    ports:
      - "8000:3000"
    depends_on:
      standalone:
        condition: service_healthy
  es:
    container_name: readbetween-es
    image: elasticsearch:8.12.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/es/data:/usr/share/elasticsearch/data
      - ${DOCKER_VOLUME_DIRECTORY:-.}/es/plugins:/usr/share/elasticsearch/plugins
      #- ${DOCKER_VOLUME_DIRECTORY:-.}/es/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - readbetween-network
    restart: on-failure
    privileged: true
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:9200 || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5

  kibana:
    container_name: readbetween-kibana
    image: kibana:8.12.0
    environment:
      - ELASTICSEARCH_HOSTS=http://es:9200
    ports:
      - "5601:5601"
    networks:
      - readbetween-network
    depends_on:
      es:
        condition: service_healthy
    restart: on-failure

networks:
  readbetween-network:
    name: readbetween-network