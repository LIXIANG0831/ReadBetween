app:
  author: LIXIANG
  version: v1.0
  port: 8080

storage:
  mysql:
    uri: "mysql+pymysql://[USER]:[PASSWORD]@[HOST]:[PORT]/awsome?charset=utf8mb4"
  redis:
    uri: "redis://[USER]:[PASSWORD]@[HOST]:[PORT]"
  minio:
    secure: false         # 是否支持 https
    cert_check: false         # 是否校验 http证书
    minio_endpoint: "[HOST]:[PORT]"       # 这个地址用来写请求, 使用同一个docker-compose 启动，能通过容器名访问
    minio_access_key: "minioadmin"
    minio_secret_key: "minioadmin"
    default_bucket: "awsome"
  milvus:
    uri: "[http/https]://[HOST]:[PORT]"
    host: "[HOST]"
    port: "[PORT]"
  es:
    hosts: ["[http/https]://[HOST]:[PORT]"]
    timeout: 200
    http_auth: None # 格式 ('user', 'password')

api:
  livekit:
    livekit_api_key: "devkey"
    livekit_api_secret: "secret"
    livekit_url: "[ws/wss]://[HOST]:[PORT]"
  deepgram:
    api_key: "xxxxxxxx"
  cartesia:
    api_key: "sk_xxxxxxxxx"

# 用于记忆存储的LLM/Embedding
# 用于记忆存储的配置
# Requirement
# 1. neo4j 用于存储实体关系；
# 2. LLM 必须支持Tolls Call且兼容OpenAI格式；
# 3. Embedding dimension 为必填项；
# 4. milvus_memory_name 为存储在Milvus的Collection Name；
memory_only:
  neo4j:
    url: "bolt://localhost:7687"
    username: "[USERNAME]"
    password: "[PASSWORD]"
  llm:
    base_url: "https://gpt.xxxxx.com/v1"
    api_key: "sk-xxxxx"
    llm_name: "COSMO-GPT"
  embedding:
    base_url: "https://gpt.xxxxx.com/v1"
    api_key: "sk-xxxxx"
    embedding_name: "text-embedding-ada-002"
    dimension: 768
  milvus_memory_name: "[DIY_COLLECTION_NAME]"

extra:
  salt: "awsome" # 加密盐

logger:
  base_log_path: "/Users/lixiang/Desktop/awsome_log"

system:
  default_model_provider:
    - Qwen: qwen
    - OpenAI: openai
    - OpenAI-Compatible: openai-compatible
    - vLLM: hosted_vllm